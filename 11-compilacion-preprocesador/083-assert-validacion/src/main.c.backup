/**
 * @file main.c
 * @brief Programa principal que demuestra el uso de assert para validaci√≥n
 * @author Ejercicios C
 * @date 2025
 */

#include <stdio.h>
#include <stdbool.h>
#include <stdlib.h>
#include "assert_validacion.h"

/* ====================================================================
 * FUNCIONES DE PRESENTACI√ìN
 * ==================================================================== */

void mostrar_titulo(void) {
    printf("üõ°Ô∏è  DEMOSTRACI√ìN DE ASSERT EN C\n");
    printf("Validaci√≥n de precondiciones durante el desarrollo\n");
    printf("================================================\n\n");
}

void mostrar_menu(void) {
    printf("Selecciona una opci√≥n:\n");
    printf("1. Demostrar casos v√°lidos (safe)\n");
    printf("2. Mostrar casos inv√°lidos (info)\n");
    printf("3. Demostrar alternativas seguras\n");
    printf("4. Mostrar estado de assert\n");
    printf("5. Ejecutar caso espec√≠fico\n");
    printf("0. Salir\n");
    printf("\nOpci√≥n: ");
}

void mostrar_casos_especificos(void) {
    printf("\n=== CASOS ESPEC√çFICOS ===\n");
    printf("1. Ra√≠z cuadrada v√°lida\n");
    printf("2. Ra√≠z cuadrada inv√°lida (‚ö†Ô∏è causar√° abort si assert activo)\n");
    printf("3. Divisi√≥n v√°lida\n");
    printf("4. Divisi√≥n por cero (‚ö†Ô∏è causar√° abort si assert activo)\n");
    printf("5. Array v√°lido\n");
    printf("6. Array NULL (‚ö†Ô∏è causar√° abort si assert activo)\n");
    printf("0. Volver al men√∫ principal\n");
    printf("\nSubopci√≥n: ");
}

/* ====================================================================
 * FUNCIONES DE DEMOSTRACI√ìN ESPEC√çFICA
 * ==================================================================== */

void ejecutar_raiz_valida(void) {
    printf("\n--- Ra√≠z cuadrada v√°lida ---\n");
    double valor = 16.0;
    printf("Calculando ra√≠z cuadrada de %.2f\n", valor);
    double resultado = raiz_cuadrada(valor);
    printf("Resultado: %.2f\n", resultado);
    printf("‚úÖ Operaci√≥n exitosa\n");
}

void ejecutar_raiz_invalida(void) {
    printf("\n--- Ra√≠z cuadrada inv√°lida ---\n");
    printf("‚ö†Ô∏è  ADVERTENCIA: Esta operaci√≥n causar√° abort() si assert est√° activo\n");
    printf("¬øContinuar? (s/N): ");
    
    char respuesta;
    scanf(" %c", &respuesta);
    
    if (respuesta == 's' || respuesta == 'S') {
        printf("Calculando ra√≠z cuadrada de -9.0\n");
        printf("Assert verificar√° que el argumento sea >= 0...\n");
        
        // Esta l√≠nea causar√° abort() si assert est√° activo
        double resultado = raiz_cuadrada(-9.0);
        printf("Resultado: %.2f\n", resultado);  // No se ejecutar√° si assert est√° activo
    } else {
        printf("Operaci√≥n cancelada\n");
    }
}

void ejecutar_division_valida(void) {
    printf("\n--- Divisi√≥n v√°lida ---\n");
    double dividendo = 20.0, divisor = 4.0;
    printf("Calculando %.2f / %.2f\n", dividendo, divisor);
    double resultado = division_segura(dividendo, divisor);
    printf("Resultado: %.2f\n", resultado);
    printf("‚úÖ Operaci√≥n exitosa\n");
}

void ejecutar_division_por_cero(void) {
    printf("\n--- Divisi√≥n por cero ---\n");
    printf("‚ö†Ô∏è  ADVERTENCIA: Esta operaci√≥n causar√° abort() si assert est√° activo\n");
    printf("¬øContinuar? (s/N): ");
    
    char respuesta;
    scanf(" %c", &respuesta);
    
    if (respuesta == 's' || respuesta == 'S') {
        printf("Calculando 10.0 / 0.0\n");
        printf("Assert verificar√° que el divisor no sea cero...\n");
        
        // Esta l√≠nea causar√° abort() si assert est√° activo
        double resultado = division_segura(10.0, 0.0);
        printf("Resultado: %.2f\n", resultado);  // No se ejecutar√° si assert est√° activo
    } else {
        printf("Operaci√≥n cancelada\n");
    }
}

void ejecutar_array_valido(void) {
    printf("\n--- Array v√°lido ---\n");
    double numeros[] = {2.5, 4.0, 6.5, 8.0, 10.5};
    int tama√±o = sizeof(numeros) / sizeof(numeros[0]);
    
    printf("Array: ");
    for (int i = 0; i < tama√±o; i++) {
        printf("%.1f ", numeros[i]);
    }
    printf("\n");
    
    double promedio = promedio_array(numeros, tama√±o);
    printf("Promedio: %.2f\n", promedio);
    printf("‚úÖ Operaci√≥n exitosa\n");
}

void ejecutar_array_null(void) {
    printf("\n--- Array NULL ---\n");
    printf("‚ö†Ô∏è  ADVERTENCIA: Esta operaci√≥n causar√° abort() si assert est√° activo\n");
    printf("¬øContinuar? (s/N): ");
    
    char respuesta;
    scanf(" %c", &respuesta);
    
    if (respuesta == 's' || respuesta == 'S') {
        printf("Calculando promedio de array NULL\n");
        printf("Assert verificar√° que el array no sea NULL...\n");
        
        // Esta l√≠nea causar√° abort() si assert est√° activo
        double promedio = promedio_array(NULL, 5);
        printf("Promedio: %.2f\n", promedio);  // No se ejecutar√° si assert est√° activo
    } else {
        printf("Operaci√≥n cancelada\n");
    }
}

/* ====================================================================
 * FUNCI√ìN PRINCIPAL INTERACTIVA
 * ==================================================================== */

int main(void) {
    mostrar_titulo();
    mostrar_estado_assert();
    
    int opcion;
    bool continuar = true;
    
    while (continuar) {
        mostrar_menu();
        
        if (scanf("%d", &opcion) != 1) {
            // Limpiar buffer de entrada en caso de error
            while (getchar() != '\n');
            printf("‚ùå Opci√≥n inv√°lida. Intenta de nuevo.\n\n");
            continue;
        }
        
        printf("\n");
        
        switch (opcion) {
            case 1:
                demostrar_casos_validos();
                break;
                
            case 2:
                demostrar_casos_invalidos();
                break;
                
            case 3:
                demostrar_alternativas_seguras();
                break;
                
            case 4:
                mostrar_estado_assert();
                break;
                
            case 5: {
                int subopcion;
                bool submenu = true;
                
                while (submenu) {
                    mostrar_casos_especificos();
                    
                    if (scanf("%d", &subopcion) != 1) {
                        while (getchar() != '\n');
                        printf("‚ùå Subopci√≥n inv√°lida. Intenta de nuevo.\n");
                        continue;
                    }
                    
                    switch (subopcion) {
                        case 1:
                            ejecutar_raiz_valida();
                            break;
                        case 2:
                            ejecutar_raiz_invalida();
                            break;
                        case 3:
                            ejecutar_division_valida();
                            break;
                        case 4:
                            ejecutar_division_por_cero();
                            break;
                        case 5:
                            ejecutar_array_valido();
                            break;
                        case 6:
                            ejecutar_array_null();
                            break;
                        case 0:
                            submenu = false;
                            break;
                        default:
                            printf("‚ùå Subopci√≥n inv√°lida\n");
                    }
                    
                    if (submenu) {
                        printf("\nPresiona Enter para continuar...");
                        while (getchar() != '\n');
                        getchar();
                    }
                }
                break;
            }
            
            case 0:
                continuar = false;
                printf("üëã ¬°Hasta luego!\n");
                break;
                
            default:
                printf("‚ùå Opci√≥n inv√°lida\n");
        }
        
        if (continuar && opcion != 5) {
            printf("Presiona Enter para continuar...");
            while (getchar() != '\n');
            getchar();
            printf("\n");
        }
    }
    
    printf("\nüéì RESUMEN EDUCATIVO:\n");
    printf("================\n");
    printf("‚Ä¢ assert() es una herramienta de DEBUGGING, no de manejo de errores\n");
    printf("‚Ä¢ Se usa para verificar PRECONDICIONES que deben ser siempre verdaderas\n");
    printf("‚Ä¢ En Release (-DNDEBUG), assert() se desactiva completamente\n");
    printf("‚Ä¢ Para errores de usuario, usa validaci√≥n manual y retorno de errores\n");
    printf("‚Ä¢ assert() ayuda a encontrar bugs durante el desarrollo\n");
    
    return 0;
}
